// This is your Prisma schema file,
// learn more about it in thedocs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // Configuración para Prisma Accelerate
  // url      = env("DATABASE_URL_PROXY") // Con Data Proxy
  // directUrl = env("DIRECT_URL") // Conexión directa (fallback)
}

// Usuarios registrados
model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  password      String?  // Para autenticación por email
  authProvider  String   @default("email") // 'email' | 'google'
  image         String?  // Para avatar de Google
  createdAt     DateTime @default(now())
  subscription  String   @default("basic") // 'basic' | 'premium'
  
  familyMembers FamilyMember[]
  savedStrategies SavedStrategy[]
  estrategiasGuardadas EstrategiaGuardada[]
  purchases Purchase[]
  orders Order[]
  
  @@map("users")
}

// Usuarios no registrados (solo email)
model GuestUser {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  
  purchases GuestPurchase[]
  
  @@map("guest_users")
}

// Compra de usuario no registrado
model GuestPurchase {
  id           String   @id @default(cuid())
  guestUserId  String
  strategyData Json
  userData     Json
  purchaseDate DateTime @default(now())
  planType     String
  accessToken  String   @unique
  
  guestUser    GuestUser @relation(fields: [guestUserId], references: [id])
  
  @@map("guest_purchases")
}

// Miembros familiares
model FamilyMember {
  id                    String   @id @default(cuid())
  userId                String
  name                  String
  birthDate             DateTime
  weeksContributed      Int
  lastGrossSalary       Float
  civilStatus           String
  createdAt             DateTime @default(now())
  
  user                  User     @relation(fields: [userId], references: [id])
  savedStrategies       SavedStrategy[]
  estrategiasGuardadas  EstrategiaGuardada[]
  
  @@map("family_members")
}

// Estrategias guardadas
model SavedStrategy {
  id             String   @id @default(cuid())
  userId         String?
  familyMemberId String?
  strategyName   String
  strategyData   Json
  purchaseDate   DateTime?
  planType       String?
  createdAt      DateTime @default(now())
  
  user           User?           @relation(fields: [userId], references: [id])
  familyMember   FamilyMember?   @relation(fields: [familyMemberId], references: [id])
  
  @@map("saved_strategies")
}

// Estrategias guardadas compartibles
model EstrategiaGuardada {
  id                String   @id @default(cuid())
  userId            String
  familyMemberId    String?
  debugCode         String   @unique
  datosEstrategia   Json
  datosUsuario      Json
  activa            Boolean  @default(true)
  visualizaciones   Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user              User           @relation(fields: [userId], references: [id])
  familiar          FamilyMember?  @relation(fields: [familyMemberId], references: [id])
  
  @@map("estrategias_guardadas")
}

// Tokens de recuperación de contraseña
model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  
  @@map("password_reset_tokens")
}

// Compras de usuarios registrados
model Purchase {
  id           String   @id @default(cuid())
  userId       String
  plan         String   // 'basic' | 'premium'
  amount       Float
  status       String   @default("pending") // 'pending' | 'completed' | 'failed'
  strategyData Json?
  userData     Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  user         User     @relation(fields: [userId], references: [id])
  
  @@map("purchases")
}

// Sistema de órdenes para MercadoPago
model Order {
  id                  String   @id @default(cuid())
  userId              String
  orderNumber         String   @unique // ORD-2024-001
  status              String   @default("pending") // 'pending' | 'paid' | 'failed' | 'cancelled' | 'expired'
  planType            String   // 'basic' | 'premium'
  amount              Decimal  @db.Decimal(10,2)
  currency            String   @default("MXN")
  
  // Datos de MercadoPago
  mercadopagoId       String?  // ID de la preferencia o pago
  externalReference   String?  // Referencia externa para webhooks
  paymentMethod       String?  // Método de pago usado
  
  // Datos de la estrategia (si aplica)
  strategyData        Json?
  strategyCode        String?  // Código de la estrategia generada
  userData            Json?
  
  // Timestamps
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  paidAt              DateTime?
  expiresAt           DateTime // 24 horas después de creación
  
  // Metadatos adicionales
  metadata            Json?
  
  // Relaciones
  user                User     @relation(fields: [userId], references: [id])
  orderItems          OrderItem[]
  
  @@map("orders")
}

// Items de cada orden
model OrderItem {
  id          String   @id @default(cuid())
  orderId     String
  itemType    String   // 'strategy' | 'premium'
  itemId      String?  // ID de la estrategia o 'premium'
  itemName    String
  quantity    Int      @default(1)
  unitPrice   Decimal  @db.Decimal(10,2)
  totalPrice  Decimal  @db.Decimal(10,2)
  createdAt   DateTime @default(now())
  
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  @@map("order_items")
}
